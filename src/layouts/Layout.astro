---
const { title, description } = Astro.props;
import Logo from "/public/assets/images/logo.webp";
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href={Logo.src} />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    <meta name="description" content={description} />
  </head>
  <body>
    <slot />
  </body>
</html>

<style is:global>
  @font-face {
    font-family: "BasicSansSM";
    src: url("/public/assets/fonts/BasicSans-SemiBold.ttf");
  }

  @font-face {
    font-family: "TrendSansFive";
    src: url("/public/assets/fonts/TrendSansFive.ttf");
  }

  .font-basic-sans {
    font-family: "BasicSansSM";
  }

  .font-trend-sans {
    font-family: "TrendSansFive";
  }

  .neon-white {
       filter: drop-shadow(0em 0em 0.01257511em rgba(255, 242, 242, 0.950000)) drop-shadow(0em 0em 0.06287556em rgba(255, 255, 255, 0.750000)) drop-shadow(0em 0em 0.18862669em rgba(255, 255, 255, 0.440000))
    }

    .neon-orange {
        filter: drop-shadow(0em 0em 0.01257511em rgba(238, 140, 0, 0.950000)) drop-shadow(0em 0em 0.06287556em rgba(238, 147, 15, 0.750000)) drop-shadow(0em 0em 0.18862669em rgba(238, 147, 15, 0.440000))
    }

  .fade-in {
    opacity: 0; 
    transition: opacity 1s ease-in-out; 
  }

  .fade-in.visible {
    opacity: 1; 
  }

  .animate-entry{
	animation: entry 1s ease-in-out;
  }

  @keyframes entry {
    from {
      transform: translateY(5rem);
    }
    to {
      transform: translateY(0);
    }
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          entry.target.classList.add("visible");
          observer.unobserve(entry.target); // Deja de observar una vez que es visible
        }
      });
    });

    const elements = document.querySelectorAll(".fade-in");
    elements.forEach((element) => {
      observer.observe(element);
    });
  });
</script>
