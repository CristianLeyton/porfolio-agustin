---
import video1 from "/public/assets/videos/verticals-video-1.mp4";
import video2 from "/public/assets/videos/verticals-video-2.mp4";
import video3 from "/public/assets/videos/verticals-video-3.mp4";
import Title from "./utils/Title.astro";

const videos = [video1, video2, video3];
---

<section class="">
    <Title className="px-3 md:px-10">
        EDICIÓN VIDEO VERTICAL
    </Title>
    <div class="slider flex justify-evenly gap-5 p-10">
        {videos.map((video, index) => (
            <video
                class={`video slide border-4 border-amber-300/80 neon-orange-big w-full md:w-1/4 aspect-[9/16] object-cover bg-black`}
                controls
                loop
                muted
                playsinline
                id={`video-${index}`}
            >
                <source src={video} type="video/mp4" />
            </video>
        ))}
    </div>
</section>

<style>
  @media (max-width: 768px) {
    .slider {
      display: flex;
      scroll-snap-type: x mandatory;
      gap: 40px;
      overflow-x: scroll;
      overflow-y: hidden;
    }

    .slide {
      flex: 0 0 100%;
      scroll-snap-align: center;
      width: 100% !important;
      object-fit: cover;
    }
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", function() {
    const videos = document.querySelectorAll(".video");

    const observerOptions = {
      root: null, // Observa en el contexto del viewport
      rootMargin: "0px",
      threshold: 0.5 // El video debe estar al menos 50% visible
    };

    const videoObserver = new IntersectionObserver((entries, observer) => {
      entries.forEach(entry => {
        const video = entry.target as HTMLVideoElement; // Asegúrate de que TypeScript sepa que es un video
        if (entry.isIntersecting) {
          video.play();
        } else {
          video.pause();
        }
      });
    }, observerOptions);

    videos.forEach(video => {
      const videoElement = video as HTMLVideoElement; // Asegúrate de que TypeScript sepa que es un video
      videoObserver.observe(videoElement);
    });
  });
</script>